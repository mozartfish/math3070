points(mean(batting$SO), mean(batting$HR), pch=16, cex=4, col=rgb(0, 0, 0, .25))
# The data suggests that you need to strike out a lot to hit a lot of home runs.
# This however seems a bit off because the cases are really extreme
# Your code here
res <- lm(x77$Illiteracy ~ x77$HS.Grad)
plot(x77$Illiteracy ~ x77$HS.Grad, main="Illiteracy vs HS.Grad", xlab="HS.Grad", ylab = "Illiteracy")
abline(res)
# This chart looks a bit off because the units used for the HS.Grad make no sense
# Your code here
res <- lm(x77$Life.Exp ~ x77$Murder)
plot(x77$Life.Exp ~ x77$Murder, main="Life Expectancy vs Murder", xlab="Murder", ylab = "Life Expectancy")
abline(res)
# Your code here
res <- lm(x77$Income ~ x77$Illiteracy)
plot(x77$Income ~ x77$Illiteracy, main="Income vs Illiteracy", xlab="Illiteracy", ylab = "Income")
abline(res)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
table(UScereal$mfr, UScereal$shelf)
# In the first shelf  G has the most items
# In the second shelf G and K are tied for the numbers of items on the second shelf
# In the third shelf K has the most items
# These statistics might be useful for how to generate sales to maximize depending
# on which shelf consumers pick the most often
# Your code here
suppressMessages(library(UsingR))
suppressMessages(library(stats))
require(stats)
mosaicplot(HairEyeColor, shade = TRUE)
# According to the textbook, a mosaic plot is an extension of a bar plot that makes it possible to view two or more categorical variables
# In the the case of this example, there are more blue eyed blond females based on the darkness
# of the shade of blue and the and the size of the rectangle
# There is also something about the pearson correlation being used which might also
# affect the results
x77 <- data.frame(state.x77)
# Your code here
plot(x77$Population, x77$Frost, main = "Population vs. Frost", xlab = "Population", ylab = "Frost")
plot(x77$Population, x77$Murder, main = "Population vs. Murder", xlab = "Population", ylab = "Murder")
plot(x77$Population, x77$Area, main = "Population vs. Area", xlab = "Population", ylab = "Area")
plot(x77$Income, x77$HS.Grad, main = "Income vs. HS.Grad", xlab = "HS.Grad", ylab = "Income")
# The Income vs. HS.Grad looks linear
# One thing though is that modeling looks completely off when you consider the different x and y variables
# Your code here
suppressMessages(library(UsingR))
x77 <- data.frame(state.x77)
# Your code here
plot(x77$Population, x77$Frost, main = "Population vs. Frost", xlab = "Population", ylab = "Frost")
plot(x77$Population, x77$Murder, main = "Population vs. Murder", xlab = "Population", ylab = "Murder")
plot(x77$Population, x77$Area, main = "Population vs. Area", xlab = "Population", ylab = "Area")
plot(x77$Income, x77$HS.Grad, main = "Income vs. HS.Grad", xlab = "HS.Grad", ylab = "Income")
# The Income vs. HS.Grad looks linear
# One thing though is that modeling looks completely off when you consider the different x and y variables
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
plot(batting$SO, batting$HR, main = "Home Runs by Strike Outs", xlab= "Strike Outs",
ylab="Home Runs")
abline(v=mean(batting$SO), lty=2)
abline(h=mean(batting$HR), lty=2)
points(mean(batting$SO), mean(batting$HR), pch=16, cex=4, col=rgb(0, 0, 0, .25))
# The data suggests that you need to strike out a lot to hit a lot of home runs.
# This however seems a bit off because the cases are really extreme
# Your code here
res <- lm(x77$Illiteracy ~ x77$HS.Grad)
plot(x77$Illiteracy ~ x77$HS.Grad, main="Illiteracy vs HS.Grad", xlab="HS.Grad", ylab = "Illiteracy")
abline(res)
# This chart looks a bit off because the units used for the HS.Grad make no sense
# Your code here
res <- lm(x77$Life.Exp ~ x77$Murder)
plot(x77$Life.Exp ~ x77$Murder, main="Life Expectancy vs Murder", xlab="Murder", ylab = "Life Expectancy")
abline(res)
# Your code here
res <- lm(x77$Income ~ x77$Illiteracy)
plot(x77$Income ~ x77$Illiteracy, main="Income vs Illiteracy", xlab="Illiteracy", ylab = "Income")
abline(res)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
table(UScereal$mfr, UScereal$shelf)
# In the first shelf  G has the most items
# In the second shelf G and K are tied for the numbers of items on the second shelf
# In the third shelf K has the most items
# These statistics might be useful for how to generate sales to maximize depending
# on which shelf consumers pick the most often
# Your code here
suppressMessages(library(UsingR))
suppressMessages(library(stats))
require(stats)
mosaicplot(HairEyeColor, shade = TRUE)
# According to the textbook, a mosaic plot is an extension of a bar plot that makes it possible to view two or more categorical variables
# In the the case of this example, there are more blue eyed blond females based on the darkness
# of the shade of blue and the and the size of the rectangle
# There is also something about the pearson correlation being used which might also
# affect the results
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
speed <- michelson$Speed
expt <- michelson$Expt
first <- speed[expt == 1]
second <- speed[expt == 2]
d_1 <- density(first)
d_2 <- density(second)
xrange <- range(c(d_1$x, d_2$x))
yrange <- range(c(d_1$y, d_2$y))
plot(d_1, xlim=xrange, ylim=yrange, xlab="densities", main="Densities of Different Experiments")
lines(d_2, lty=2)
# Your code here
times <- c(25, 0, 45, 90, 0, 30, 30, 30, 30, 15, 0, 90, 0)
students <- rep(c("Marsha", "Bill", "Holly"), times=c(5, 4, 4))
boxplot(times ~ students, data = list(times, students))
# Your code here
Students <- c("Jackie", "Florence", "Mildred")
Temp <- c(98.2, 98.6, 98.2)
Pulse <- c(96, 56, 76)
Systolic <- c(134, 120, 150)
Diastolic <- c(90, 80, 95)
df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
plot(df)
boxplot(df)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
split(ToothGrowth$len, list(ToothGrowth$supp, ToothGrowth$dose))
str("airquality")
data(airquality)
str(airquality)
print(airquality$Month)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
speed <- michelson$Speed
expt <- michelson$Expt
first <- speed[expt == 1]
second <- speed[expt == 2]
d_1 <- density(first)
d_2 <- density(second)
xrange <- range(c(d_1$x, d_2$x))
yrange <- range(c(d_1$y, d_2$y))
plot(d_1, xlim=xrange, ylim=yrange, xlab="densities", main="Densities of Different Experiments")
lines(d_2, lty=2)
# Your code here
times <- c(25, 0, 45, 90, 0, 30, 30, 30, 30, 15, 0, 90, 0)
students <- rep(c("Marsha", "Bill", "Holly"), times=c(5, 4, 4))
boxplot(times ~ students, data = list(times, students))
# Your code here
Students <- c("Jackie", "Florence", "Mildred")
Temp <- c(98.2, 98.6, 98.2)
Pulse <- c(96, 56, 76)
Systolic <- c(134, 120, 150)
Diastolic <- c(90, 80, 95)
df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
plot(df)
boxplot(df)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
split(ToothGrowth$len, list(ToothGrowth$supp, ToothGrowth$dose))
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95)) rownames(data) <- c("Jackie", "Florence", "Mildred") colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic") data2 <- as.data.frame(data) plot(data2)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95)) rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
data2 <- as.data.frame(data) plot(data2)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95)) rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
data2 <- as.data.frame(data) plot(data2)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
rownames(data) <- c("Jackie", "Florence", "Mildred")
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
data2 <- as.data.frame(data)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
data2 <- as.data.frame(data)
plot(data2)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
# Students <- c("Jackie", "Florence", "Mildred")
# Temp <- c(98.2, 98.6, 98.2)
# Pulse <- c(96, 56, 76)
# Systolic <- c(134, 120, 150)
# Diastolic <- c(90, 80, 95)
# df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
# plot(df)
# boxplot(df)
data <- rbind(c(98.2, 96, 134, 90), c(98.6, 56, 120, 80), c(98.2, 76, 150, 95))
rownames(data) <- c("Jackie", "Florence", "Mildred")
colnames(data) <- c("Temp", "Pulse", "Systolic", "Diastolic")
data2 <- as.data.frame(data)
plot(data2)
boxplot(data2)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
Students <- c("Jackie", "Florence", "Mildred")
Temp <- c(98.2, 98.6, 98.2)
Pulse <- c(96, 56, 76)
Systolic <- c(134, 120, 150)
Diastolic <- c(90, 80, 95)
df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
plot(df)
boxplot(df)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
# Your code here
Students <- c("Jackie", "Florence", "Mildred")
Temp <- c(98.2, 98.6, 98.2)
Pulse <- c(96, 56, 76)
Systolic <- c(134, 120, 150)
Diastolic <- c(90, 80, 95)
df <- data.frame(Temp, Pulse, Systolic, Diastolic, row.names = Students)
plot(df)
boxplot(df)
# The charts are different with the plot function producing a trellis layout
# the boxplot produces a set of standard boxplot visualizations
x77 <- data.frame(state.x77)
# Your code here
plot(x77$Population, x77$Frost, main = "Population vs. Frost", xlab = "Population", ylab = "Frost")
plot(x77$Population, x77$Murder, main = "Population vs. Murder", xlab = "Population", ylab = "Murder")
plot(x77$Population, x77$Area, main = "Population vs. Area", xlab = "Population", ylab = "Area")
plot(x77$Income, x77$HS.Grad, main = "Income vs. HS.Grad", xlab = "HS.Grad", ylab = "Income")
# The Income vs. HS.Grad looks linear
# One thing though is that modeling looks completely off when you consider the different x and y variables
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
plot(batting$SO, batting$HR, main = "Home Runs by Strike Outs", xlab= "Strike Outs",
ylab="Home Runs")
abline(v=mean(batting$SO), lty=2)
abline(h=mean(batting$HR), lty=2)
points(mean(batting$SO), mean(batting$HR), pch=16, cex=4, col=rgb(0, 0, 0, .25))
# The data suggests that you need to strike out a lot to hit a lot of home runs.
# This however seems a bit off because the cases are really extreme
# Your code here
res <- lm(x77$Illiteracy ~ x77$HS.Grad)
plot(x77$Illiteracy ~ x77$HS.Grad, main="Illiteracy vs HS.Grad", xlab="HS.Grad", ylab = "Illiteracy")
abline(res)
# This chart looks a bit off because the units used for the HS.Grad make no sense
# Your code here
res <- lm(x77$Life.Exp ~ x77$Murder)
plot(x77$Life.Exp ~ x77$Murder, main="Life Expectancy vs Murder", xlab="Murder", ylab = "Life Expectancy")
abline(res)
# Your code here
res <- lm(x77$Income ~ x77$Illiteracy)
plot(x77$Income ~ x77$Illiteracy, main="Income vs Illiteracy", xlab="Illiteracy", ylab = "Income")
abline(res)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
table(UScereal$mfr, UScereal$shelf)
# In the first shelf  G has the most items
# In the second shelf G and K are tied for the numbers of items on the second shelf
# In the third shelf K has the most items
# These statistics might be useful for how to generate sales to maximize depending
# on which shelf consumers pick the most often
# Your code here
suppressMessages(library(UsingR))
suppressMessages(library(stats))
require(stats)
mosaicplot(HairEyeColor, shade = TRUE)
# According to the textbook, a mosaic plot is an extension of a bar plot that makes it possible to view two or more categorical variables
# In the the case of this example, there are more blue eyed blond females based on the darkness
# of the shade of blue and the and the size of the rectangle
# There is also something about the pearson correlation being used which might also
# affect the results
# Your solution here
rep("a", 6)
# Your solution here
seq(1, 100, by=2)
# Your solution here
rep(c(1, 2, 3), times=c(3, 3, 3))
# Your code here
x <- c(2, 5, 4, 10, 8)
# Your code here
x^2
# Your code here
x - 6
# Your code here
(x - 9)^2
# Your code here
isprime <- function(x) {
y <- seq(2, x-1)
for (value in y) {
if (x %% value == 0)
return("False")
}
return("True")
}
isprime(7)
# Your code here
# Your code here
suppressMessages(library(UsingR))
require("UsingR")
# density plot
pi2000density <- density(pi2000)
# histogram plot
# the breaks parameter defines the spacing between bars or the number of bars
pi2000hist <- hist(pi2000, breaks= 0:10 - 0.5)
plot(pi2000density)
plot(pi2000hist)
# Your code here
suppressMessages(library(UsingR))
require("UsingR")
histogramChart <- hist(DDT)
#plot(histogramChart)
boxplotChart <- boxplot(DDT, main="DDT Kale Data", ylab="kale mass")
# Estimates
# Mean: 3.25 based on the boxplot
# SD: roughly 0.5 based on sorting the data since the points seem really close
# print(sort(DDT))
# Actual data summary
mean(DDT)
sd(DDT)
help(suppressMessages)
# Your code here
bronze <- olympic2012$Bronze.Per.100K.pop
silver <- olympic2012$Silver.Per.100K.pop
gold <- olympic2012$Gold.Per.100K.pop
country <- olympic2012$Country.name
df <- data.frame(Bronze, Silver, Gold, row.names=country)
# plot a heat map
plotmat <- sapply(df, scale)
rownames(plotmat) <- rownames(df)
heatmap(plotmat, Rowv = NA, Colv = NA)
# The heat map is a numeric matrix with the bronze,
# silver and gold medals per 100,000 people in the
# population standardized for each variable
# where the mean was subtracted from each observation, and then divided by the standard deviation
# The countries are on the y axis
# The bronze, silver and gold categories are on the
# x axis.
# An interesting finding was that there were that France did not have a lot of gold, silver
# and bronze medals per 100,000 people even though the French are really successful in
# Olympic sports. I also think that there is something off by this chart because there
# should be a lot more countries (the United States is missing for example). # It might be interesting to group the countries by continent for the data.
# Your code here
suppressMessages(library(UsingR))
suppressMessages(library(lattice))
require(UsingR)
library(lattice)
battingAverage <- batting$H/batting$AB
bwplot(batting$teamID ~ battingAverage, data=batting)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
ggplot(mtcars, aes(group=gear, x=gear, y=mpg)) + geom_boxplot()
# Your code here
suppressMessages(library(ggplot2))
library(ggplot2)
ggplot(mtcars, aes(x=hp, y=mpg)) + geom_point() + facet_grid(cyl ~ gear)
# Your code here
suppressMessages(library(UsingR))
require(UsingR)
intentionalWalkRate <- batting$IBB/batting$AB
ggplot(batting, aes(x=HR, y=IBB/AB)) + geom_point() + geom_smooth(method=lm, fullrange=TRUE)
olympic2012 <- read.csv("http://introcs.cs.princeton.edu/java/data/olympic-medals2012.csv")
# Your code here
bronze <- olympic2012$Bronze.Per.100K.pop
silver <- olympic2012$Silver.Per.100K.pop
gold <- olympic2012$Gold.Per.100K.pop
country <- olympic2012$Country.name
df <- data.frame(Bronze, Silver, Gold, row.names=country)
# plot a heat map
plotmat <- sapply(df, scale)
rownames(plotmat) <- rownames(df)
heatmap(plotmat, Rowv = NA, Colv = NA)
# The heat map is a numeric matrix with the bronze,
# silver and gold medals per 100,000 people in the
# population standardized for each variable
# where the mean was subtracted from each observation, and then divided by the standard deviation
# The countries are on the y axis
# The bronze, silver and gold categories are on the
# x axis.
# An interesting finding was that there were that France did not have a lot of gold, silver
# and bronze medals per 100,000 people even though the French are really successful in
# Olympic sports. I also think that there is something off by this chart because there
# should be a lot more countries (the United States is missing for example). # It might be interesting to group the countries by continent for the data.
# Your code here
Bronze <- olympic2012$Bronze.Per.100K.pop
Silver <- olympic2012$Silver.Per.100K.pop
Gold <- olympic2012$Gold.Per.100K.pop
country <- olympic2012$Country.name
df <- data.frame(Bronze, Silver, Gold, row.names=country)
# plot a heat map
plotmat <- sapply(df, scale)
rownames(plotmat) <- rownames(df)
heatmap(plotmat, Rowv = NA, Colv = NA)
# The heat map is a numeric matrix with the bronze,
# silver and gold medals per 100,000 people in the
# population standardized for each variable
# where the mean was subtracted from each observation, and then divided by the standard deviation
# The countries are on the y axis
# The bronze, silver and gold categories are on the
# x axis.
# An interesting finding was that there were that France did not have a lot of gold, silver
# and bronze medals per 100,000 people even though the French are really successful in
# Olympic sports. I also think that there is something off by this chart because there
# should be a lot more countries (the United States is missing for example). # It might be interesting to group the countries by continent for the data.
# Your code here
bronze <- olympic2012$Bronze.Per.100K.pop
silver <- olympic2012$Silver.Per.100K.pop
gold <- olympic2012$Gold.Per.100K.pop
country <- olympic2012$Country.name
df <- data.frame(bronze, silver, gold, row.names=country)
# plot a heat map
plotmat <- sapply(df, scale)
rownames(plotmat) <- rownames(df)
heatmap(plotmat, Rowv = NA, Colv = NA)
# The heat map is a numeric matrix with the bronze,
# silver and gold medals per 100,000 people in the
# population standardized for each variable
# where the mean was subtracted from each observation, and then divided by the standard deviation
# The countries are on the y axis
# The bronze, silver and gold categories are on the
# x axis.
# An interesting finding was that there were that France did not have a lot of gold, silver
# and bronze medals per 100,000 people even though the French are really successful in
# Olympic sports. I also think that there is something off by this chart because there
# should be a lot more countries (the United States is missing for example). # It might be interesting to group the countries by continent for the data.
